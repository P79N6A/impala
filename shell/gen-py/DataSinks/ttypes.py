#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Exprs.ttypes
import Types.ttypes
import Descriptors.ttypes
import Partitions.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TDataSinkType:
  DATA_STREAM_SINK = 0
  TABLE_SINK = 1
  JOIN_BUILD_SINK = 2
  PLAN_ROOT_SINK = 3

  _VALUES_TO_NAMES = {
    0: "DATA_STREAM_SINK",
    1: "TABLE_SINK",
    2: "JOIN_BUILD_SINK",
    3: "PLAN_ROOT_SINK",
  }

  _NAMES_TO_VALUES = {
    "DATA_STREAM_SINK": 0,
    "TABLE_SINK": 1,
    "JOIN_BUILD_SINK": 2,
    "PLAN_ROOT_SINK": 3,
  }

class TSinkAction:
  INSERT = 0
  UPDATE = 1
  UPSERT = 2
  DELETE = 3

  _VALUES_TO_NAMES = {
    0: "INSERT",
    1: "UPDATE",
    2: "UPSERT",
    3: "DELETE",
  }

  _NAMES_TO_VALUES = {
    "INSERT": 0,
    "UPDATE": 1,
    "UPSERT": 2,
    "DELETE": 3,
  }

class TTableSinkType:
  HDFS = 0
  HBASE = 1
  KUDU = 2

  _VALUES_TO_NAMES = {
    0: "HDFS",
    1: "HBASE",
    2: "KUDU",
  }

  _NAMES_TO_VALUES = {
    "HDFS": 0,
    "HBASE": 1,
    "KUDU": 2,
  }


class TDataStreamSink:
  """
  Attributes:
   - dest_node_id
   - output_partition
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'dest_node_id', None, None, ), # 1
    (2, TType.STRUCT, 'output_partition', (Partitions.ttypes.TDataPartition, Partitions.ttypes.TDataPartition.thrift_spec), None, ), # 2
  )

  def __init__(self, dest_node_id=None, output_partition=None,):
    self.dest_node_id = dest_node_id
    self.output_partition = output_partition

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.dest_node_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.output_partition = Partitions.ttypes.TDataPartition()
          self.output_partition.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDataStreamSink')
    if self.dest_node_id is not None:
      oprot.writeFieldBegin('dest_node_id', TType.I32, 1)
      oprot.writeI32(self.dest_node_id)
      oprot.writeFieldEnd()
    if self.output_partition is not None:
      oprot.writeFieldBegin('output_partition', TType.STRUCT, 2)
      self.output_partition.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dest_node_id is None:
      raise TProtocol.TProtocolException(message='Required field dest_node_id is unset!')
    if self.output_partition is None:
      raise TProtocol.TProtocolException(message='Required field output_partition is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class THdfsTableSink:
  """
  Attributes:
   - partition_key_exprs
   - overwrite
   - skip_header_line_count
   - input_is_clustered
   - sort_columns
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'partition_key_exprs', (TType.STRUCT,(Exprs.ttypes.TExpr, Exprs.ttypes.TExpr.thrift_spec)), None, ), # 1
    (2, TType.BOOL, 'overwrite', None, None, ), # 2
    (3, TType.I32, 'skip_header_line_count', None, None, ), # 3
    (4, TType.BOOL, 'input_is_clustered', None, None, ), # 4
    (5, TType.LIST, 'sort_columns', (TType.I32,None), None, ), # 5
  )

  def __init__(self, partition_key_exprs=None, overwrite=None, skip_header_line_count=None, input_is_clustered=None, sort_columns=None,):
    self.partition_key_exprs = partition_key_exprs
    self.overwrite = overwrite
    self.skip_header_line_count = skip_header_line_count
    self.input_is_clustered = input_is_clustered
    self.sort_columns = sort_columns

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.partition_key_exprs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Exprs.ttypes.TExpr()
            _elem5.read(iprot)
            self.partition_key_exprs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.overwrite = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skip_header_line_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.input_is_clustered = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.sort_columns = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI32();
            self.sort_columns.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('THdfsTableSink')
    if self.partition_key_exprs is not None:
      oprot.writeFieldBegin('partition_key_exprs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.partition_key_exprs))
      for iter12 in self.partition_key_exprs:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.overwrite is not None:
      oprot.writeFieldBegin('overwrite', TType.BOOL, 2)
      oprot.writeBool(self.overwrite)
      oprot.writeFieldEnd()
    if self.skip_header_line_count is not None:
      oprot.writeFieldBegin('skip_header_line_count', TType.I32, 3)
      oprot.writeI32(self.skip_header_line_count)
      oprot.writeFieldEnd()
    if self.input_is_clustered is not None:
      oprot.writeFieldBegin('input_is_clustered', TType.BOOL, 4)
      oprot.writeBool(self.input_is_clustered)
      oprot.writeFieldEnd()
    if self.sort_columns is not None:
      oprot.writeFieldBegin('sort_columns', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.sort_columns))
      for iter13 in self.sort_columns:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.partition_key_exprs is None:
      raise TProtocol.TProtocolException(message='Required field partition_key_exprs is unset!')
    if self.overwrite is None:
      raise TProtocol.TProtocolException(message='Required field overwrite is unset!')
    if self.input_is_clustered is None:
      raise TProtocol.TProtocolException(message='Required field input_is_clustered is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TKuduTableSink:
  """
  Attributes:
   - referenced_columns
   - ignore_not_found_or_duplicate
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'referenced_columns', (TType.I32,None), None, ), # 1
    (2, TType.BOOL, 'ignore_not_found_or_duplicate', None, None, ), # 2
  )

  def __init__(self, referenced_columns=None, ignore_not_found_or_duplicate=None,):
    self.referenced_columns = referenced_columns
    self.ignore_not_found_or_duplicate = ignore_not_found_or_duplicate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.referenced_columns = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.referenced_columns.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.ignore_not_found_or_duplicate = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TKuduTableSink')
    if self.referenced_columns is not None:
      oprot.writeFieldBegin('referenced_columns', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.referenced_columns))
      for iter20 in self.referenced_columns:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ignore_not_found_or_duplicate is not None:
      oprot.writeFieldBegin('ignore_not_found_or_duplicate', TType.BOOL, 2)
      oprot.writeBool(self.ignore_not_found_or_duplicate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TJoinBuildSink:
  """
  Attributes:
   - join_table_id
   - build_exprs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'join_table_id', None, None, ), # 1
    (2, TType.LIST, 'build_exprs', (TType.STRUCT,(Exprs.ttypes.TExpr, Exprs.ttypes.TExpr.thrift_spec)), None, ), # 2
  )

  def __init__(self, join_table_id=None, build_exprs=None,):
    self.join_table_id = join_table_id
    self.build_exprs = build_exprs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.join_table_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.build_exprs = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = Exprs.ttypes.TExpr()
            _elem26.read(iprot)
            self.build_exprs.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TJoinBuildSink')
    if self.join_table_id is not None:
      oprot.writeFieldBegin('join_table_id', TType.I32, 1)
      oprot.writeI32(self.join_table_id)
      oprot.writeFieldEnd()
    if self.build_exprs is not None:
      oprot.writeFieldBegin('build_exprs', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.build_exprs))
      for iter27 in self.build_exprs:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.join_table_id is None:
      raise TProtocol.TProtocolException(message='Required field join_table_id is unset!')
    if self.build_exprs is None:
      raise TProtocol.TProtocolException(message='Required field build_exprs is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TTableSink:
  """
  Attributes:
   - target_table_id
   - type
   - action
   - hdfs_table_sink
   - kudu_table_sink
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'target_table_id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'action', None, None, ), # 3
    (4, TType.STRUCT, 'hdfs_table_sink', (THdfsTableSink, THdfsTableSink.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'kudu_table_sink', (TKuduTableSink, TKuduTableSink.thrift_spec), None, ), # 5
  )

  def __init__(self, target_table_id=None, type=None, action=None, hdfs_table_sink=None, kudu_table_sink=None,):
    self.target_table_id = target_table_id
    self.type = type
    self.action = action
    self.hdfs_table_sink = hdfs_table_sink
    self.kudu_table_sink = kudu_table_sink

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.target_table_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.action = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.hdfs_table_sink = THdfsTableSink()
          self.hdfs_table_sink.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.kudu_table_sink = TKuduTableSink()
          self.kudu_table_sink.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TTableSink')
    if self.target_table_id is not None:
      oprot.writeFieldBegin('target_table_id', TType.I32, 1)
      oprot.writeI32(self.target_table_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.I32, 3)
      oprot.writeI32(self.action)
      oprot.writeFieldEnd()
    if self.hdfs_table_sink is not None:
      oprot.writeFieldBegin('hdfs_table_sink', TType.STRUCT, 4)
      self.hdfs_table_sink.write(oprot)
      oprot.writeFieldEnd()
    if self.kudu_table_sink is not None:
      oprot.writeFieldBegin('kudu_table_sink', TType.STRUCT, 5)
      self.kudu_table_sink.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.target_table_id is None:
      raise TProtocol.TProtocolException(message='Required field target_table_id is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.action is None:
      raise TProtocol.TProtocolException(message='Required field action is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TDataSink:
  """
  Attributes:
   - type
   - stream_sink
   - table_sink
   - join_build_sink
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRUCT, 'stream_sink', (TDataStreamSink, TDataStreamSink.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'table_sink', (TTableSink, TTableSink.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'join_build_sink', (TJoinBuildSink, TJoinBuildSink.thrift_spec), None, ), # 4
  )

  def __init__(self, type=None, stream_sink=None, table_sink=None, join_build_sink=None,):
    self.type = type
    self.stream_sink = stream_sink
    self.table_sink = table_sink
    self.join_build_sink = join_build_sink

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.stream_sink = TDataStreamSink()
          self.stream_sink.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.table_sink = TTableSink()
          self.table_sink.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.join_build_sink = TJoinBuildSink()
          self.join_build_sink.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDataSink')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.stream_sink is not None:
      oprot.writeFieldBegin('stream_sink', TType.STRUCT, 2)
      self.stream_sink.write(oprot)
      oprot.writeFieldEnd()
    if self.table_sink is not None:
      oprot.writeFieldBegin('table_sink', TType.STRUCT, 3)
      self.table_sink.write(oprot)
      oprot.writeFieldEnd()
    if self.join_build_sink is not None:
      oprot.writeFieldBegin('join_build_sink', TType.STRUCT, 4)
      self.join_build_sink.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
