#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Types.ttypes
import Exprs.ttypes
import DataSinks.ttypes
import PlanNodes.ttypes
import Partitions.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TPlanFragment:
  """
  Attributes:
   - idx
   - display_name
   - plan
   - output_exprs
   - output_sink
   - partition
   - min_reservation_bytes
   - initial_reservation_total_claims
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'idx', None, None, ), # 1
    (2, TType.STRING, 'display_name', None, None, ), # 2
    (3, TType.STRUCT, 'plan', (PlanNodes.ttypes.TPlan, PlanNodes.ttypes.TPlan.thrift_spec), None, ), # 3
    (4, TType.LIST, 'output_exprs', (TType.STRUCT,(Exprs.ttypes.TExpr, Exprs.ttypes.TExpr.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'output_sink', (DataSinks.ttypes.TDataSink, DataSinks.ttypes.TDataSink.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'partition', (Partitions.ttypes.TDataPartition, Partitions.ttypes.TDataPartition.thrift_spec), None, ), # 6
    (7, TType.I64, 'min_reservation_bytes', None, None, ), # 7
    (8, TType.I64, 'initial_reservation_total_claims', None, None, ), # 8
  )

  def __init__(self, idx=None, display_name=None, plan=None, output_exprs=None, output_sink=None, partition=None, min_reservation_bytes=None, initial_reservation_total_claims=None,):
    self.idx = idx
    self.display_name = display_name
    self.plan = plan
    self.output_exprs = output_exprs
    self.output_sink = output_sink
    self.partition = partition
    self.min_reservation_bytes = min_reservation_bytes
    self.initial_reservation_total_claims = initial_reservation_total_claims

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.idx = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.display_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.plan = PlanNodes.ttypes.TPlan()
          self.plan.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.output_exprs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Exprs.ttypes.TExpr()
            _elem5.read(iprot)
            self.output_exprs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.output_sink = DataSinks.ttypes.TDataSink()
          self.output_sink.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.partition = Partitions.ttypes.TDataPartition()
          self.partition.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.min_reservation_bytes = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.initial_reservation_total_claims = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TPlanFragment')
    if self.idx is not None:
      oprot.writeFieldBegin('idx', TType.I32, 1)
      oprot.writeI32(self.idx)
      oprot.writeFieldEnd()
    if self.display_name is not None:
      oprot.writeFieldBegin('display_name', TType.STRING, 2)
      oprot.writeString(self.display_name)
      oprot.writeFieldEnd()
    if self.plan is not None:
      oprot.writeFieldBegin('plan', TType.STRUCT, 3)
      self.plan.write(oprot)
      oprot.writeFieldEnd()
    if self.output_exprs is not None:
      oprot.writeFieldBegin('output_exprs', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.output_exprs))
      for iter6 in self.output_exprs:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.output_sink is not None:
      oprot.writeFieldBegin('output_sink', TType.STRUCT, 5)
      self.output_sink.write(oprot)
      oprot.writeFieldEnd()
    if self.partition is not None:
      oprot.writeFieldBegin('partition', TType.STRUCT, 6)
      self.partition.write(oprot)
      oprot.writeFieldEnd()
    if self.min_reservation_bytes is not None:
      oprot.writeFieldBegin('min_reservation_bytes', TType.I64, 7)
      oprot.writeI64(self.min_reservation_bytes)
      oprot.writeFieldEnd()
    if self.initial_reservation_total_claims is not None:
      oprot.writeFieldBegin('initial_reservation_total_claims', TType.I64, 8)
      oprot.writeI64(self.initial_reservation_total_claims)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.idx is None:
      raise TProtocol.TProtocolException(message='Required field idx is unset!')
    if self.display_name is None:
      raise TProtocol.TProtocolException(message='Required field display_name is unset!')
    if self.partition is None:
      raise TProtocol.TProtocolException(message='Required field partition is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TScanRangeLocation:
  """
  Attributes:
   - host_idx
   - volume_id
   - is_cached
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'host_idx', None, None, ), # 1
    (2, TType.I32, 'volume_id', None, -1, ), # 2
    (3, TType.BOOL, 'is_cached', None, False, ), # 3
  )

  def __init__(self, host_idx=None, volume_id=thrift_spec[2][4], is_cached=thrift_spec[3][4],):
    self.host_idx = host_idx
    self.volume_id = volume_id
    self.is_cached = is_cached

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.host_idx = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.volume_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_cached = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TScanRangeLocation')
    if self.host_idx is not None:
      oprot.writeFieldBegin('host_idx', TType.I32, 1)
      oprot.writeI32(self.host_idx)
      oprot.writeFieldEnd()
    if self.volume_id is not None:
      oprot.writeFieldBegin('volume_id', TType.I32, 2)
      oprot.writeI32(self.volume_id)
      oprot.writeFieldEnd()
    if self.is_cached is not None:
      oprot.writeFieldBegin('is_cached', TType.BOOL, 3)
      oprot.writeBool(self.is_cached)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.host_idx is None:
      raise TProtocol.TProtocolException(message='Required field host_idx is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TScanRangeLocationList:
  """
  Attributes:
   - scan_range
   - locations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'scan_range', (PlanNodes.ttypes.TScanRange, PlanNodes.ttypes.TScanRange.thrift_spec), None, ), # 1
    (2, TType.LIST, 'locations', (TType.STRUCT,(TScanRangeLocation, TScanRangeLocation.thrift_spec)), None, ), # 2
  )

  def __init__(self, scan_range=None, locations=None,):
    self.scan_range = scan_range
    self.locations = locations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.scan_range = PlanNodes.ttypes.TScanRange()
          self.scan_range.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.locations = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = TScanRangeLocation()
            _elem12.read(iprot)
            self.locations.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TScanRangeLocationList')
    if self.scan_range is not None:
      oprot.writeFieldBegin('scan_range', TType.STRUCT, 1)
      self.scan_range.write(oprot)
      oprot.writeFieldEnd()
    if self.locations is not None:
      oprot.writeFieldBegin('locations', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.locations))
      for iter13 in self.locations:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.scan_range is None:
      raise TProtocol.TProtocolException(message='Required field scan_range is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TPlanFragmentTree:
  """
  Attributes:
   - cohort_id
   - fragments
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cohort_id', None, None, ), # 1
    (2, TType.LIST, 'fragments', (TType.STRUCT,(TPlanFragment, TPlanFragment.thrift_spec)), None, ), # 2
  )

  def __init__(self, cohort_id=None, fragments=None,):
    self.cohort_id = cohort_id
    self.fragments = fragments

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cohort_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.fragments = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = TPlanFragment()
            _elem19.read(iprot)
            self.fragments.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TPlanFragmentTree')
    if self.cohort_id is not None:
      oprot.writeFieldBegin('cohort_id', TType.I32, 1)
      oprot.writeI32(self.cohort_id)
      oprot.writeFieldEnd()
    if self.fragments is not None:
      oprot.writeFieldBegin('fragments', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.fragments))
      for iter20 in self.fragments:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cohort_id is None:
      raise TProtocol.TProtocolException(message='Required field cohort_id is unset!')
    if self.fragments is None:
      raise TProtocol.TProtocolException(message='Required field fragments is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
