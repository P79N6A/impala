#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TBackendGflags:
  """
  Attributes:
   - sentry_config
   - load_auth_to_local_rules
   - non_impala_java_vlog
   - impala_log_lvl
   - inc_stats_size_limit_bytes
   - lineage_event_log_dir
   - load_catalog_in_background
   - num_metadata_loading_threads
   - principal
   - authorization_policy_file
   - server_name
   - authorization_policy_provider_class
   - kudu_master_hosts
   - local_library_path
   - read_size
   - kudu_operation_timeout_ms
   - initial_hms_cnxn_timeout_s
   - enable_stats_extrapolation
   - sentry_catalog_polling_frequency_s
   - max_hdfs_partitions_parallel_load
   - max_nonhdfs_partitions_parallel_load
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sentry_config', None, None, ), # 1
    (2, TType.BOOL, 'load_auth_to_local_rules', None, None, ), # 2
    (3, TType.I32, 'non_impala_java_vlog', None, None, ), # 3
    (4, TType.I32, 'impala_log_lvl', None, None, ), # 4
    (5, TType.I64, 'inc_stats_size_limit_bytes', None, None, ), # 5
    (6, TType.STRING, 'lineage_event_log_dir', None, None, ), # 6
    (7, TType.BOOL, 'load_catalog_in_background', None, None, ), # 7
    (8, TType.I32, 'num_metadata_loading_threads', None, None, ), # 8
    (9, TType.STRING, 'principal', None, None, ), # 9
    (10, TType.STRING, 'authorization_policy_file', None, None, ), # 10
    (11, TType.STRING, 'server_name', None, None, ), # 11
    (12, TType.STRING, 'authorization_policy_provider_class', None, None, ), # 12
    (13, TType.STRING, 'kudu_master_hosts', None, None, ), # 13
    (14, TType.STRING, 'local_library_path', None, None, ), # 14
    (15, TType.I32, 'read_size', None, None, ), # 15
    (16, TType.I32, 'kudu_operation_timeout_ms', None, None, ), # 16
    (17, TType.I32, 'initial_hms_cnxn_timeout_s', None, None, ), # 17
    (18, TType.BOOL, 'enable_stats_extrapolation', None, None, ), # 18
    (19, TType.I64, 'sentry_catalog_polling_frequency_s', None, None, ), # 19
    (20, TType.I32, 'max_hdfs_partitions_parallel_load', None, None, ), # 20
    (21, TType.I32, 'max_nonhdfs_partitions_parallel_load', None, None, ), # 21
  )

  def __init__(self, sentry_config=None, load_auth_to_local_rules=None, non_impala_java_vlog=None, impala_log_lvl=None, inc_stats_size_limit_bytes=None, lineage_event_log_dir=None, load_catalog_in_background=None, num_metadata_loading_threads=None, principal=None, authorization_policy_file=None, server_name=None, authorization_policy_provider_class=None, kudu_master_hosts=None, local_library_path=None, read_size=None, kudu_operation_timeout_ms=None, initial_hms_cnxn_timeout_s=None, enable_stats_extrapolation=None, sentry_catalog_polling_frequency_s=None, max_hdfs_partitions_parallel_load=None, max_nonhdfs_partitions_parallel_load=None,):
    self.sentry_config = sentry_config
    self.load_auth_to_local_rules = load_auth_to_local_rules
    self.non_impala_java_vlog = non_impala_java_vlog
    self.impala_log_lvl = impala_log_lvl
    self.inc_stats_size_limit_bytes = inc_stats_size_limit_bytes
    self.lineage_event_log_dir = lineage_event_log_dir
    self.load_catalog_in_background = load_catalog_in_background
    self.num_metadata_loading_threads = num_metadata_loading_threads
    self.principal = principal
    self.authorization_policy_file = authorization_policy_file
    self.server_name = server_name
    self.authorization_policy_provider_class = authorization_policy_provider_class
    self.kudu_master_hosts = kudu_master_hosts
    self.local_library_path = local_library_path
    self.read_size = read_size
    self.kudu_operation_timeout_ms = kudu_operation_timeout_ms
    self.initial_hms_cnxn_timeout_s = initial_hms_cnxn_timeout_s
    self.enable_stats_extrapolation = enable_stats_extrapolation
    self.sentry_catalog_polling_frequency_s = sentry_catalog_polling_frequency_s
    self.max_hdfs_partitions_parallel_load = max_hdfs_partitions_parallel_load
    self.max_nonhdfs_partitions_parallel_load = max_nonhdfs_partitions_parallel_load

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sentry_config = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.load_auth_to_local_rules = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.non_impala_java_vlog = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.impala_log_lvl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.inc_stats_size_limit_bytes = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.lineage_event_log_dir = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.load_catalog_in_background = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.num_metadata_loading_threads = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.principal = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.authorization_policy_file = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.server_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.authorization_policy_provider_class = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.kudu_master_hosts = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.local_library_path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.read_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.kudu_operation_timeout_ms = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.initial_hms_cnxn_timeout_s = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.enable_stats_extrapolation = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.sentry_catalog_polling_frequency_s = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.max_hdfs_partitions_parallel_load = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.max_nonhdfs_partitions_parallel_load = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TBackendGflags')
    if self.sentry_config is not None:
      oprot.writeFieldBegin('sentry_config', TType.STRING, 1)
      oprot.writeString(self.sentry_config)
      oprot.writeFieldEnd()
    if self.load_auth_to_local_rules is not None:
      oprot.writeFieldBegin('load_auth_to_local_rules', TType.BOOL, 2)
      oprot.writeBool(self.load_auth_to_local_rules)
      oprot.writeFieldEnd()
    if self.non_impala_java_vlog is not None:
      oprot.writeFieldBegin('non_impala_java_vlog', TType.I32, 3)
      oprot.writeI32(self.non_impala_java_vlog)
      oprot.writeFieldEnd()
    if self.impala_log_lvl is not None:
      oprot.writeFieldBegin('impala_log_lvl', TType.I32, 4)
      oprot.writeI32(self.impala_log_lvl)
      oprot.writeFieldEnd()
    if self.inc_stats_size_limit_bytes is not None:
      oprot.writeFieldBegin('inc_stats_size_limit_bytes', TType.I64, 5)
      oprot.writeI64(self.inc_stats_size_limit_bytes)
      oprot.writeFieldEnd()
    if self.lineage_event_log_dir is not None:
      oprot.writeFieldBegin('lineage_event_log_dir', TType.STRING, 6)
      oprot.writeString(self.lineage_event_log_dir)
      oprot.writeFieldEnd()
    if self.load_catalog_in_background is not None:
      oprot.writeFieldBegin('load_catalog_in_background', TType.BOOL, 7)
      oprot.writeBool(self.load_catalog_in_background)
      oprot.writeFieldEnd()
    if self.num_metadata_loading_threads is not None:
      oprot.writeFieldBegin('num_metadata_loading_threads', TType.I32, 8)
      oprot.writeI32(self.num_metadata_loading_threads)
      oprot.writeFieldEnd()
    if self.principal is not None:
      oprot.writeFieldBegin('principal', TType.STRING, 9)
      oprot.writeString(self.principal)
      oprot.writeFieldEnd()
    if self.authorization_policy_file is not None:
      oprot.writeFieldBegin('authorization_policy_file', TType.STRING, 10)
      oprot.writeString(self.authorization_policy_file)
      oprot.writeFieldEnd()
    if self.server_name is not None:
      oprot.writeFieldBegin('server_name', TType.STRING, 11)
      oprot.writeString(self.server_name)
      oprot.writeFieldEnd()
    if self.authorization_policy_provider_class is not None:
      oprot.writeFieldBegin('authorization_policy_provider_class', TType.STRING, 12)
      oprot.writeString(self.authorization_policy_provider_class)
      oprot.writeFieldEnd()
    if self.kudu_master_hosts is not None:
      oprot.writeFieldBegin('kudu_master_hosts', TType.STRING, 13)
      oprot.writeString(self.kudu_master_hosts)
      oprot.writeFieldEnd()
    if self.local_library_path is not None:
      oprot.writeFieldBegin('local_library_path', TType.STRING, 14)
      oprot.writeString(self.local_library_path)
      oprot.writeFieldEnd()
    if self.read_size is not None:
      oprot.writeFieldBegin('read_size', TType.I32, 15)
      oprot.writeI32(self.read_size)
      oprot.writeFieldEnd()
    if self.kudu_operation_timeout_ms is not None:
      oprot.writeFieldBegin('kudu_operation_timeout_ms', TType.I32, 16)
      oprot.writeI32(self.kudu_operation_timeout_ms)
      oprot.writeFieldEnd()
    if self.initial_hms_cnxn_timeout_s is not None:
      oprot.writeFieldBegin('initial_hms_cnxn_timeout_s', TType.I32, 17)
      oprot.writeI32(self.initial_hms_cnxn_timeout_s)
      oprot.writeFieldEnd()
    if self.enable_stats_extrapolation is not None:
      oprot.writeFieldBegin('enable_stats_extrapolation', TType.BOOL, 18)
      oprot.writeBool(self.enable_stats_extrapolation)
      oprot.writeFieldEnd()
    if self.sentry_catalog_polling_frequency_s is not None:
      oprot.writeFieldBegin('sentry_catalog_polling_frequency_s', TType.I64, 19)
      oprot.writeI64(self.sentry_catalog_polling_frequency_s)
      oprot.writeFieldEnd()
    if self.max_hdfs_partitions_parallel_load is not None:
      oprot.writeFieldBegin('max_hdfs_partitions_parallel_load', TType.I32, 20)
      oprot.writeI32(self.max_hdfs_partitions_parallel_load)
      oprot.writeFieldEnd()
    if self.max_nonhdfs_partitions_parallel_load is not None:
      oprot.writeFieldBegin('max_nonhdfs_partitions_parallel_load', TType.I32, 21)
      oprot.writeI32(self.max_nonhdfs_partitions_parallel_load)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sentry_config is None:
      raise TProtocol.TProtocolException(message='Required field sentry_config is unset!')
    if self.load_auth_to_local_rules is None:
      raise TProtocol.TProtocolException(message='Required field load_auth_to_local_rules is unset!')
    if self.non_impala_java_vlog is None:
      raise TProtocol.TProtocolException(message='Required field non_impala_java_vlog is unset!')
    if self.impala_log_lvl is None:
      raise TProtocol.TProtocolException(message='Required field impala_log_lvl is unset!')
    if self.inc_stats_size_limit_bytes is None:
      raise TProtocol.TProtocolException(message='Required field inc_stats_size_limit_bytes is unset!')
    if self.lineage_event_log_dir is None:
      raise TProtocol.TProtocolException(message='Required field lineage_event_log_dir is unset!')
    if self.load_catalog_in_background is None:
      raise TProtocol.TProtocolException(message='Required field load_catalog_in_background is unset!')
    if self.num_metadata_loading_threads is None:
      raise TProtocol.TProtocolException(message='Required field num_metadata_loading_threads is unset!')
    if self.principal is None:
      raise TProtocol.TProtocolException(message='Required field principal is unset!')
    if self.authorization_policy_file is None:
      raise TProtocol.TProtocolException(message='Required field authorization_policy_file is unset!')
    if self.server_name is None:
      raise TProtocol.TProtocolException(message='Required field server_name is unset!')
    if self.authorization_policy_provider_class is None:
      raise TProtocol.TProtocolException(message='Required field authorization_policy_provider_class is unset!')
    if self.kudu_master_hosts is None:
      raise TProtocol.TProtocolException(message='Required field kudu_master_hosts is unset!')
    if self.local_library_path is None:
      raise TProtocol.TProtocolException(message='Required field local_library_path is unset!')
    if self.read_size is None:
      raise TProtocol.TProtocolException(message='Required field read_size is unset!')
    if self.kudu_operation_timeout_ms is None:
      raise TProtocol.TProtocolException(message='Required field kudu_operation_timeout_ms is unset!')
    if self.initial_hms_cnxn_timeout_s is None:
      raise TProtocol.TProtocolException(message='Required field initial_hms_cnxn_timeout_s is unset!')
    if self.enable_stats_extrapolation is None:
      raise TProtocol.TProtocolException(message='Required field enable_stats_extrapolation is unset!')
    if self.sentry_catalog_polling_frequency_s is None:
      raise TProtocol.TProtocolException(message='Required field sentry_catalog_polling_frequency_s is unset!')
    if self.max_hdfs_partitions_parallel_load is None:
      raise TProtocol.TProtocolException(message='Required field max_hdfs_partitions_parallel_load is unset!')
    if self.max_nonhdfs_partitions_parallel_load is None:
      raise TProtocol.TProtocolException(message='Required field max_nonhdfs_partitions_parallel_load is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
