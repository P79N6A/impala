#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import CatalogObjects.ttypes
import JniCatalog.ttypes
import Types.ttypes
import Status.ttypes
import Results.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class CatalogServiceVersion:
  V1 = 0

  _VALUES_TO_NAMES = {
    0: "V1",
  }

  _NAMES_TO_VALUES = {
    "V1": 0,
  }


class TCatalogServiceRequestHeader:
  """
  Attributes:
   - requesting_user
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requesting_user', None, None, ), # 1
  )

  def __init__(self, requesting_user=None,):
    self.requesting_user = requesting_user

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requesting_user = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TCatalogServiceRequestHeader')
    if self.requesting_user is not None:
      oprot.writeFieldBegin('requesting_user', TType.STRING, 1)
      oprot.writeString(self.requesting_user)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TCatalogUpdateResult:
  """
  Attributes:
   - catalog_service_id
   - version
   - status
   - updated_catalog_objects
   - removed_catalog_objects
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'catalog_service_id', (Types.ttypes.TUniqueId, Types.ttypes.TUniqueId.thrift_spec), None, ), # 1
    (2, TType.I64, 'version', None, None, ), # 2
    (3, TType.STRUCT, 'status', (Status.ttypes.TStatus, Status.ttypes.TStatus.thrift_spec), None, ), # 3
    (4, TType.LIST, 'updated_catalog_objects', (TType.STRUCT,(CatalogObjects.ttypes.TCatalogObject, CatalogObjects.ttypes.TCatalogObject.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'removed_catalog_objects', (TType.STRUCT,(CatalogObjects.ttypes.TCatalogObject, CatalogObjects.ttypes.TCatalogObject.thrift_spec)), None, ), # 5
  )

  def __init__(self, catalog_service_id=None, version=None, status=None, updated_catalog_objects=None, removed_catalog_objects=None,):
    self.catalog_service_id = catalog_service_id
    self.version = version
    self.status = status
    self.updated_catalog_objects = updated_catalog_objects
    self.removed_catalog_objects = removed_catalog_objects

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.catalog_service_id = Types.ttypes.TUniqueId()
          self.catalog_service_id.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.version = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.status = Status.ttypes.TStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.updated_catalog_objects = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = CatalogObjects.ttypes.TCatalogObject()
            _elem5.read(iprot)
            self.updated_catalog_objects.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.removed_catalog_objects = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = CatalogObjects.ttypes.TCatalogObject()
            _elem11.read(iprot)
            self.removed_catalog_objects.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TCatalogUpdateResult')
    if self.catalog_service_id is not None:
      oprot.writeFieldBegin('catalog_service_id', TType.STRUCT, 1)
      self.catalog_service_id.write(oprot)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I64, 2)
      oprot.writeI64(self.version)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 3)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    if self.updated_catalog_objects is not None:
      oprot.writeFieldBegin('updated_catalog_objects', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.updated_catalog_objects))
      for iter12 in self.updated_catalog_objects:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.removed_catalog_objects is not None:
      oprot.writeFieldBegin('removed_catalog_objects', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.removed_catalog_objects))
      for iter13 in self.removed_catalog_objects:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.catalog_service_id is None:
      raise TProtocol.TProtocolException(message='Required field catalog_service_id is unset!')
    if self.version is None:
      raise TProtocol.TProtocolException(message='Required field version is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TDdlExecRequest:
  """
  Attributes:
   - protocol_version
   - header
   - ddl_type
   - alter_table_params
   - alter_view_params
   - create_db_params
   - create_table_params
   - create_table_like_params
   - create_view_params
   - create_fn_params
   - drop_db_params
   - drop_table_or_view_params
   - truncate_params
   - drop_fn_params
   - compute_stats_params
   - create_data_source_params
   - drop_data_source_params
   - drop_stats_params
   - create_drop_role_params
   - grant_revoke_role_params
   - grant_revoke_priv_params
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'protocol_version', None,     0, ), # 1
    (2, TType.I32, 'ddl_type', None, None, ), # 2
    (3, TType.STRUCT, 'alter_table_params', (JniCatalog.ttypes.TAlterTableParams, JniCatalog.ttypes.TAlterTableParams.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'alter_view_params', (JniCatalog.ttypes.TCreateOrAlterViewParams, JniCatalog.ttypes.TCreateOrAlterViewParams.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'create_db_params', (JniCatalog.ttypes.TCreateDbParams, JniCatalog.ttypes.TCreateDbParams.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'create_table_params', (JniCatalog.ttypes.TCreateTableParams, JniCatalog.ttypes.TCreateTableParams.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'create_table_like_params', (JniCatalog.ttypes.TCreateTableLikeParams, JniCatalog.ttypes.TCreateTableLikeParams.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'create_view_params', (JniCatalog.ttypes.TCreateOrAlterViewParams, JniCatalog.ttypes.TCreateOrAlterViewParams.thrift_spec), None, ), # 8
    (9, TType.STRUCT, 'create_fn_params', (JniCatalog.ttypes.TCreateFunctionParams, JniCatalog.ttypes.TCreateFunctionParams.thrift_spec), None, ), # 9
    (10, TType.STRUCT, 'drop_db_params', (JniCatalog.ttypes.TDropDbParams, JniCatalog.ttypes.TDropDbParams.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'drop_table_or_view_params', (JniCatalog.ttypes.TDropTableOrViewParams, JniCatalog.ttypes.TDropTableOrViewParams.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'drop_fn_params', (JniCatalog.ttypes.TDropFunctionParams, JniCatalog.ttypes.TDropFunctionParams.thrift_spec), None, ), # 12
    (13, TType.STRUCT, 'compute_stats_params', (JniCatalog.ttypes.TComputeStatsParams, JniCatalog.ttypes.TComputeStatsParams.thrift_spec), None, ), # 13
    (14, TType.STRUCT, 'create_data_source_params', (JniCatalog.ttypes.TCreateDataSourceParams, JniCatalog.ttypes.TCreateDataSourceParams.thrift_spec), None, ), # 14
    (15, TType.STRUCT, 'drop_data_source_params', (JniCatalog.ttypes.TDropDataSourceParams, JniCatalog.ttypes.TDropDataSourceParams.thrift_spec), None, ), # 15
    (16, TType.STRUCT, 'drop_stats_params', (JniCatalog.ttypes.TDropStatsParams, JniCatalog.ttypes.TDropStatsParams.thrift_spec), None, ), # 16
    (17, TType.STRUCT, 'header', (TCatalogServiceRequestHeader, TCatalogServiceRequestHeader.thrift_spec), None, ), # 17
    (18, TType.STRUCT, 'create_drop_role_params', (JniCatalog.ttypes.TCreateDropRoleParams, JniCatalog.ttypes.TCreateDropRoleParams.thrift_spec), None, ), # 18
    (19, TType.STRUCT, 'grant_revoke_role_params', (JniCatalog.ttypes.TGrantRevokeRoleParams, JniCatalog.ttypes.TGrantRevokeRoleParams.thrift_spec), None, ), # 19
    (20, TType.STRUCT, 'grant_revoke_priv_params', (JniCatalog.ttypes.TGrantRevokePrivParams, JniCatalog.ttypes.TGrantRevokePrivParams.thrift_spec), None, ), # 20
    (21, TType.STRUCT, 'truncate_params', (JniCatalog.ttypes.TTruncateParams, JniCatalog.ttypes.TTruncateParams.thrift_spec), None, ), # 21
  )

  def __init__(self, protocol_version=thrift_spec[1][4], header=None, ddl_type=None, alter_table_params=None, alter_view_params=None, create_db_params=None, create_table_params=None, create_table_like_params=None, create_view_params=None, create_fn_params=None, drop_db_params=None, drop_table_or_view_params=None, truncate_params=None, drop_fn_params=None, compute_stats_params=None, create_data_source_params=None, drop_data_source_params=None, drop_stats_params=None, create_drop_role_params=None, grant_revoke_role_params=None, grant_revoke_priv_params=None,):
    self.protocol_version = protocol_version
    self.header = header
    self.ddl_type = ddl_type
    self.alter_table_params = alter_table_params
    self.alter_view_params = alter_view_params
    self.create_db_params = create_db_params
    self.create_table_params = create_table_params
    self.create_table_like_params = create_table_like_params
    self.create_view_params = create_view_params
    self.create_fn_params = create_fn_params
    self.drop_db_params = drop_db_params
    self.drop_table_or_view_params = drop_table_or_view_params
    self.truncate_params = truncate_params
    self.drop_fn_params = drop_fn_params
    self.compute_stats_params = compute_stats_params
    self.create_data_source_params = create_data_source_params
    self.drop_data_source_params = drop_data_source_params
    self.drop_stats_params = drop_stats_params
    self.create_drop_role_params = create_drop_role_params
    self.grant_revoke_role_params = grant_revoke_role_params
    self.grant_revoke_priv_params = grant_revoke_priv_params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.protocol_version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRUCT:
          self.header = TCatalogServiceRequestHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ddl_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.alter_table_params = JniCatalog.ttypes.TAlterTableParams()
          self.alter_table_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.alter_view_params = JniCatalog.ttypes.TCreateOrAlterViewParams()
          self.alter_view_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.create_db_params = JniCatalog.ttypes.TCreateDbParams()
          self.create_db_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.create_table_params = JniCatalog.ttypes.TCreateTableParams()
          self.create_table_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.create_table_like_params = JniCatalog.ttypes.TCreateTableLikeParams()
          self.create_table_like_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.create_view_params = JniCatalog.ttypes.TCreateOrAlterViewParams()
          self.create_view_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.create_fn_params = JniCatalog.ttypes.TCreateFunctionParams()
          self.create_fn_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.drop_db_params = JniCatalog.ttypes.TDropDbParams()
          self.drop_db_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.drop_table_or_view_params = JniCatalog.ttypes.TDropTableOrViewParams()
          self.drop_table_or_view_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRUCT:
          self.truncate_params = JniCatalog.ttypes.TTruncateParams()
          self.truncate_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.drop_fn_params = JniCatalog.ttypes.TDropFunctionParams()
          self.drop_fn_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.compute_stats_params = JniCatalog.ttypes.TComputeStatsParams()
          self.compute_stats_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.create_data_source_params = JniCatalog.ttypes.TCreateDataSourceParams()
          self.create_data_source_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.drop_data_source_params = JniCatalog.ttypes.TDropDataSourceParams()
          self.drop_data_source_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.drop_stats_params = JniCatalog.ttypes.TDropStatsParams()
          self.drop_stats_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.create_drop_role_params = JniCatalog.ttypes.TCreateDropRoleParams()
          self.create_drop_role_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRUCT:
          self.grant_revoke_role_params = JniCatalog.ttypes.TGrantRevokeRoleParams()
          self.grant_revoke_role_params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.grant_revoke_priv_params = JniCatalog.ttypes.TGrantRevokePrivParams()
          self.grant_revoke_priv_params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDdlExecRequest')
    if self.protocol_version is not None:
      oprot.writeFieldBegin('protocol_version', TType.I32, 1)
      oprot.writeI32(self.protocol_version)
      oprot.writeFieldEnd()
    if self.ddl_type is not None:
      oprot.writeFieldBegin('ddl_type', TType.I32, 2)
      oprot.writeI32(self.ddl_type)
      oprot.writeFieldEnd()
    if self.alter_table_params is not None:
      oprot.writeFieldBegin('alter_table_params', TType.STRUCT, 3)
      self.alter_table_params.write(oprot)
      oprot.writeFieldEnd()
    if self.alter_view_params is not None:
      oprot.writeFieldBegin('alter_view_params', TType.STRUCT, 4)
      self.alter_view_params.write(oprot)
      oprot.writeFieldEnd()
    if self.create_db_params is not None:
      oprot.writeFieldBegin('create_db_params', TType.STRUCT, 5)
      self.create_db_params.write(oprot)
      oprot.writeFieldEnd()
    if self.create_table_params is not None:
      oprot.writeFieldBegin('create_table_params', TType.STRUCT, 6)
      self.create_table_params.write(oprot)
      oprot.writeFieldEnd()
    if self.create_table_like_params is not None:
      oprot.writeFieldBegin('create_table_like_params', TType.STRUCT, 7)
      self.create_table_like_params.write(oprot)
      oprot.writeFieldEnd()
    if self.create_view_params is not None:
      oprot.writeFieldBegin('create_view_params', TType.STRUCT, 8)
      self.create_view_params.write(oprot)
      oprot.writeFieldEnd()
    if self.create_fn_params is not None:
      oprot.writeFieldBegin('create_fn_params', TType.STRUCT, 9)
      self.create_fn_params.write(oprot)
      oprot.writeFieldEnd()
    if self.drop_db_params is not None:
      oprot.writeFieldBegin('drop_db_params', TType.STRUCT, 10)
      self.drop_db_params.write(oprot)
      oprot.writeFieldEnd()
    if self.drop_table_or_view_params is not None:
      oprot.writeFieldBegin('drop_table_or_view_params', TType.STRUCT, 11)
      self.drop_table_or_view_params.write(oprot)
      oprot.writeFieldEnd()
    if self.drop_fn_params is not None:
      oprot.writeFieldBegin('drop_fn_params', TType.STRUCT, 12)
      self.drop_fn_params.write(oprot)
      oprot.writeFieldEnd()
    if self.compute_stats_params is not None:
      oprot.writeFieldBegin('compute_stats_params', TType.STRUCT, 13)
      self.compute_stats_params.write(oprot)
      oprot.writeFieldEnd()
    if self.create_data_source_params is not None:
      oprot.writeFieldBegin('create_data_source_params', TType.STRUCT, 14)
      self.create_data_source_params.write(oprot)
      oprot.writeFieldEnd()
    if self.drop_data_source_params is not None:
      oprot.writeFieldBegin('drop_data_source_params', TType.STRUCT, 15)
      self.drop_data_source_params.write(oprot)
      oprot.writeFieldEnd()
    if self.drop_stats_params is not None:
      oprot.writeFieldBegin('drop_stats_params', TType.STRUCT, 16)
      self.drop_stats_params.write(oprot)
      oprot.writeFieldEnd()
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 17)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    if self.create_drop_role_params is not None:
      oprot.writeFieldBegin('create_drop_role_params', TType.STRUCT, 18)
      self.create_drop_role_params.write(oprot)
      oprot.writeFieldEnd()
    if self.grant_revoke_role_params is not None:
      oprot.writeFieldBegin('grant_revoke_role_params', TType.STRUCT, 19)
      self.grant_revoke_role_params.write(oprot)
      oprot.writeFieldEnd()
    if self.grant_revoke_priv_params is not None:
      oprot.writeFieldBegin('grant_revoke_priv_params', TType.STRUCT, 20)
      self.grant_revoke_priv_params.write(oprot)
      oprot.writeFieldEnd()
    if self.truncate_params is not None:
      oprot.writeFieldBegin('truncate_params', TType.STRUCT, 21)
      self.truncate_params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.protocol_version is None:
      raise TProtocol.TProtocolException(message='Required field protocol_version is unset!')
    if self.ddl_type is None:
      raise TProtocol.TProtocolException(message='Required field ddl_type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TDdlExecResponse:
  """
  Attributes:
   - result
   - new_table_created
   - result_set
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'result', (TCatalogUpdateResult, TCatalogUpdateResult.thrift_spec), None, ), # 1
    (2, TType.BOOL, 'new_table_created', None, None, ), # 2
    (3, TType.STRUCT, 'result_set', (Results.ttypes.TResultSet, Results.ttypes.TResultSet.thrift_spec), None, ), # 3
  )

  def __init__(self, result=None, new_table_created=None, result_set=None,):
    self.result = result
    self.new_table_created = new_table_created
    self.result_set = result_set

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.result = TCatalogUpdateResult()
          self.result.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.new_table_created = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.result_set = Results.ttypes.TResultSet()
          self.result_set.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDdlExecResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRUCT, 1)
      self.result.write(oprot)
      oprot.writeFieldEnd()
    if self.new_table_created is not None:
      oprot.writeFieldBegin('new_table_created', TType.BOOL, 2)
      oprot.writeBool(self.new_table_created)
      oprot.writeFieldEnd()
    if self.result_set is not None:
      oprot.writeFieldBegin('result_set', TType.STRUCT, 3)
      self.result_set.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.result is None:
      raise TProtocol.TProtocolException(message='Required field result is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TUpdateCatalogRequest:
  """
  Attributes:
   - protocol_version
   - header
   - target_table
   - db_name
   - created_partitions
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'protocol_version', None,     0, ), # 1
    (2, TType.STRUCT, 'header', (TCatalogServiceRequestHeader, TCatalogServiceRequestHeader.thrift_spec), None, ), # 2
    (3, TType.STRING, 'target_table', None, None, ), # 3
    (4, TType.STRING, 'db_name', None, None, ), # 4
    (5, TType.SET, 'created_partitions', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, protocol_version=thrift_spec[1][4], header=None, target_table=None, db_name=None, created_partitions=None,):
    self.protocol_version = protocol_version
    self.header = header
    self.target_table = target_table
    self.db_name = db_name
    self.created_partitions = created_partitions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.protocol_version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.header = TCatalogServiceRequestHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.target_table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.db_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.created_partitions = set()
          (_etype17, _size14) = iprot.readSetBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.created_partitions.add(_elem19)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TUpdateCatalogRequest')
    if self.protocol_version is not None:
      oprot.writeFieldBegin('protocol_version', TType.I32, 1)
      oprot.writeI32(self.protocol_version)
      oprot.writeFieldEnd()
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 2)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    if self.target_table is not None:
      oprot.writeFieldBegin('target_table', TType.STRING, 3)
      oprot.writeString(self.target_table)
      oprot.writeFieldEnd()
    if self.db_name is not None:
      oprot.writeFieldBegin('db_name', TType.STRING, 4)
      oprot.writeString(self.db_name)
      oprot.writeFieldEnd()
    if self.created_partitions is not None:
      oprot.writeFieldBegin('created_partitions', TType.SET, 5)
      oprot.writeSetBegin(TType.STRING, len(self.created_partitions))
      for iter20 in self.created_partitions:
        oprot.writeString(iter20)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.protocol_version is None:
      raise TProtocol.TProtocolException(message='Required field protocol_version is unset!')
    if self.target_table is None:
      raise TProtocol.TProtocolException(message='Required field target_table is unset!')
    if self.db_name is None:
      raise TProtocol.TProtocolException(message='Required field db_name is unset!')
    if self.created_partitions is None:
      raise TProtocol.TProtocolException(message='Required field created_partitions is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TUpdateCatalogResponse:
  """
  Attributes:
   - result
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'result', (TCatalogUpdateResult, TCatalogUpdateResult.thrift_spec), None, ), # 1
  )

  def __init__(self, result=None,):
    self.result = result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.result = TCatalogUpdateResult()
          self.result.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TUpdateCatalogResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRUCT, 1)
      self.result.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.result is None:
      raise TProtocol.TProtocolException(message='Required field result is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TResetMetadataRequest:
  """
  Attributes:
   - protocol_version
   - header
   - is_refresh
   - table_name
   - partition_spec
   - db_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'protocol_version', None,     0, ), # 1
    (2, TType.BOOL, 'is_refresh', None, None, ), # 2
    (3, TType.STRUCT, 'table_name', (CatalogObjects.ttypes.TTableName, CatalogObjects.ttypes.TTableName.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'header', (TCatalogServiceRequestHeader, TCatalogServiceRequestHeader.thrift_spec), None, ), # 4
    (5, TType.LIST, 'partition_spec', (TType.STRUCT,(CatalogObjects.ttypes.TPartitionKeyValue, CatalogObjects.ttypes.TPartitionKeyValue.thrift_spec)), None, ), # 5
    (6, TType.STRING, 'db_name', None, None, ), # 6
  )

  def __init__(self, protocol_version=thrift_spec[1][4], header=None, is_refresh=None, table_name=None, partition_spec=None, db_name=None,):
    self.protocol_version = protocol_version
    self.header = header
    self.is_refresh = is_refresh
    self.table_name = table_name
    self.partition_spec = partition_spec
    self.db_name = db_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.protocol_version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.header = TCatalogServiceRequestHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_refresh = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.table_name = CatalogObjects.ttypes.TTableName()
          self.table_name.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.partition_spec = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = CatalogObjects.ttypes.TPartitionKeyValue()
            _elem26.read(iprot)
            self.partition_spec.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.db_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TResetMetadataRequest')
    if self.protocol_version is not None:
      oprot.writeFieldBegin('protocol_version', TType.I32, 1)
      oprot.writeI32(self.protocol_version)
      oprot.writeFieldEnd()
    if self.is_refresh is not None:
      oprot.writeFieldBegin('is_refresh', TType.BOOL, 2)
      oprot.writeBool(self.is_refresh)
      oprot.writeFieldEnd()
    if self.table_name is not None:
      oprot.writeFieldBegin('table_name', TType.STRUCT, 3)
      self.table_name.write(oprot)
      oprot.writeFieldEnd()
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 4)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    if self.partition_spec is not None:
      oprot.writeFieldBegin('partition_spec', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.partition_spec))
      for iter27 in self.partition_spec:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.db_name is not None:
      oprot.writeFieldBegin('db_name', TType.STRING, 6)
      oprot.writeString(self.db_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.protocol_version is None:
      raise TProtocol.TProtocolException(message='Required field protocol_version is unset!')
    if self.is_refresh is None:
      raise TProtocol.TProtocolException(message='Required field is_refresh is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TResetMetadataResponse:
  """
  Attributes:
   - result
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'result', (TCatalogUpdateResult, TCatalogUpdateResult.thrift_spec), None, ), # 1
  )

  def __init__(self, result=None,):
    self.result = result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.result = TCatalogUpdateResult()
          self.result.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TResetMetadataResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRUCT, 1)
      self.result.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.result is None:
      raise TProtocol.TProtocolException(message='Required field result is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TGetFunctionsRequest:
  """
  Attributes:
   - protocol_version
   - header
   - db_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'protocol_version', None,     0, ), # 1
    (2, TType.STRING, 'db_name', None, None, ), # 2
    (3, TType.STRUCT, 'header', (TCatalogServiceRequestHeader, TCatalogServiceRequestHeader.thrift_spec), None, ), # 3
  )

  def __init__(self, protocol_version=thrift_spec[1][4], header=None, db_name=None,):
    self.protocol_version = protocol_version
    self.header = header
    self.db_name = db_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.protocol_version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.header = TCatalogServiceRequestHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.db_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TGetFunctionsRequest')
    if self.protocol_version is not None:
      oprot.writeFieldBegin('protocol_version', TType.I32, 1)
      oprot.writeI32(self.protocol_version)
      oprot.writeFieldEnd()
    if self.db_name is not None:
      oprot.writeFieldBegin('db_name', TType.STRING, 2)
      oprot.writeString(self.db_name)
      oprot.writeFieldEnd()
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 3)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.protocol_version is None:
      raise TProtocol.TProtocolException(message='Required field protocol_version is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TGetFunctionsResponse:
  """
  Attributes:
   - status
   - functions
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'status', (Status.ttypes.TStatus, Status.ttypes.TStatus.thrift_spec), None, ), # 1
    (2, TType.LIST, 'functions', (TType.STRUCT,(Types.ttypes.TFunction, Types.ttypes.TFunction.thrift_spec)), None, ), # 2
  )

  def __init__(self, status=None, functions=None,):
    self.status = status
    self.functions = functions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.status = Status.ttypes.TStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.functions = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = Types.ttypes.TFunction()
            _elem33.read(iprot)
            self.functions.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TGetFunctionsResponse')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 1)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    if self.functions is not None:
      oprot.writeFieldBegin('functions', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.functions))
      for iter34 in self.functions:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TGetCatalogObjectRequest:
  """
  Attributes:
   - protocol_version
   - header
   - object_desc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'protocol_version', None,     0, ), # 1
    (2, TType.STRUCT, 'object_desc', (CatalogObjects.ttypes.TCatalogObject, CatalogObjects.ttypes.TCatalogObject.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'header', (TCatalogServiceRequestHeader, TCatalogServiceRequestHeader.thrift_spec), None, ), # 3
  )

  def __init__(self, protocol_version=thrift_spec[1][4], header=None, object_desc=None,):
    self.protocol_version = protocol_version
    self.header = header
    self.object_desc = object_desc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.protocol_version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.header = TCatalogServiceRequestHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.object_desc = CatalogObjects.ttypes.TCatalogObject()
          self.object_desc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TGetCatalogObjectRequest')
    if self.protocol_version is not None:
      oprot.writeFieldBegin('protocol_version', TType.I32, 1)
      oprot.writeI32(self.protocol_version)
      oprot.writeFieldEnd()
    if self.object_desc is not None:
      oprot.writeFieldBegin('object_desc', TType.STRUCT, 2)
      self.object_desc.write(oprot)
      oprot.writeFieldEnd()
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 3)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.protocol_version is None:
      raise TProtocol.TProtocolException(message='Required field protocol_version is unset!')
    if self.object_desc is None:
      raise TProtocol.TProtocolException(message='Required field object_desc is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TGetCatalogObjectResponse:
  """
  Attributes:
   - catalog_object
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'catalog_object', (CatalogObjects.ttypes.TCatalogObject, CatalogObjects.ttypes.TCatalogObject.thrift_spec), None, ), # 1
  )

  def __init__(self, catalog_object=None,):
    self.catalog_object = catalog_object

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.catalog_object = CatalogObjects.ttypes.TCatalogObject()
          self.catalog_object.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TGetCatalogObjectResponse')
    if self.catalog_object is not None:
      oprot.writeFieldBegin('catalog_object', TType.STRUCT, 1)
      self.catalog_object.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.catalog_object is None:
      raise TProtocol.TProtocolException(message='Required field catalog_object is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TPrioritizeLoadRequest:
  """
  Attributes:
   - protocol_version
   - header
   - object_descs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'protocol_version', None,     0, ), # 1
    (2, TType.STRUCT, 'header', (TCatalogServiceRequestHeader, TCatalogServiceRequestHeader.thrift_spec), None, ), # 2
    (3, TType.LIST, 'object_descs', (TType.STRUCT,(CatalogObjects.ttypes.TCatalogObject, CatalogObjects.ttypes.TCatalogObject.thrift_spec)), None, ), # 3
  )

  def __init__(self, protocol_version=thrift_spec[1][4], header=None, object_descs=None,):
    self.protocol_version = protocol_version
    self.header = header
    self.object_descs = object_descs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.protocol_version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.header = TCatalogServiceRequestHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.object_descs = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = CatalogObjects.ttypes.TCatalogObject()
            _elem40.read(iprot)
            self.object_descs.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TPrioritizeLoadRequest')
    if self.protocol_version is not None:
      oprot.writeFieldBegin('protocol_version', TType.I32, 1)
      oprot.writeI32(self.protocol_version)
      oprot.writeFieldEnd()
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 2)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    if self.object_descs is not None:
      oprot.writeFieldBegin('object_descs', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.object_descs))
      for iter41 in self.object_descs:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.protocol_version is None:
      raise TProtocol.TProtocolException(message='Required field protocol_version is unset!')
    if self.object_descs is None:
      raise TProtocol.TProtocolException(message='Required field object_descs is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TPrioritizeLoadResponse:
  """
  Attributes:
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'status', (Status.ttypes.TStatus, Status.ttypes.TStatus.thrift_spec), None, ), # 1
  )

  def __init__(self, status=None,):
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.status = Status.ttypes.TStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TPrioritizeLoadResponse')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 1)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TSentryAdminCheckRequest:
  """
  Attributes:
   - protocol_version
   - header
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'protocol_version', None,     0, ), # 1
    (2, TType.STRUCT, 'header', (TCatalogServiceRequestHeader, TCatalogServiceRequestHeader.thrift_spec), None, ), # 2
  )

  def __init__(self, protocol_version=thrift_spec[1][4], header=None,):
    self.protocol_version = protocol_version
    self.header = header

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.protocol_version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.header = TCatalogServiceRequestHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TSentryAdminCheckRequest')
    if self.protocol_version is not None:
      oprot.writeFieldBegin('protocol_version', TType.I32, 1)
      oprot.writeI32(self.protocol_version)
      oprot.writeFieldEnd()
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 2)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.protocol_version is None:
      raise TProtocol.TProtocolException(message='Required field protocol_version is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TSentryAdminCheckResponse:
  """
  Attributes:
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'status', (Status.ttypes.TStatus, Status.ttypes.TStatus.thrift_spec), None, ), # 1
  )

  def __init__(self, status=None,):
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.status = Status.ttypes.TStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TSentryAdminCheckResponse')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 1)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
